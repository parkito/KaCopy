group 'com.parkito.kacopy'
version '0.0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply from: rootProject.projectDir.path + '/dependencies.gradle'

jar {
    archiveName = 'KaCopy_' + version + '.jar'
    from {
        (configurations.runtime).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

repositories {
    mavenCentral()
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile "org.slf4j:slf4j-api:$self4jVersion"
    //test
    testCompile "org.junit.jupiter:junit-jupiter-api:$jUnitApiVersion"
    testCompile "org.junit.jupiter:junit-jupiter-engine:$jUnitEngineVersion"
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

def getSonatypeProperty(String name) {
    name = 'sonatype' + name.capitalize()
    if (project.hasProperty(name)) {
        return project.getProperties()[name]
    } else {
        return ''
    }
}
/*
*String pomName = <NAME>
String pomRepositoryUrl = <URL (github, gitlab, etc)>
String pomScmUrl = <SCM URL>
String pomDescription = <DESCRIPTION>
String pomLicenseName = <LICENSE NAME>
String pomLicenseUrl = <URL TO THE LICENSE>
String pomDeveloperId = <DEVELOPER ID>
String pomDeveloperEmail = <EMAIL>
String pomDeveloperName = <MY NAME>
 */
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: getSonatypeProperty('username'), password: getSonatypeProperty('password'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: getSonatypeProperty('username'), password: getSonatypeProperty('password'))
            }

            pom.project {
                name pomName
                description pomDescription
                url pomRepositoryUrl
                version version
                groupId group
                artifactId pomName
                packaging 'jar'
                scm {
                    connection pomScmUrl
                    developerConnection pomScmUrl
                    url pomScmUrl
                }
                licenses {
                    license {
                        name pomLicenseName
                        url pomLicenseUrl
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id pomDeveloperId
                        name pomDeveloperName
                        email pomDeveloperEmail
                    }
                }
            }
        }
    }